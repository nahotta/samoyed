hikaricp_config = {
  # Whether autocommit should be used
  autoCommit = true

  # The connection timeout
  connectionTimeout = 30 seconds

  # The idle timeout
  idleTimeout = 10 minutes

  # The max lifetime of a connection
  maxLifetime = 30 minutes

  # If non null, the query that should be used to test connections
  connectionTestQuery = null

  # If non null, sets the minimum number of idle connections to maintain.
  minimumIdle = 10

  # The maximum number of connections to make.
  maximumPoolSize = 10

  # If non null, sets the name of the connection pool. Primarily used for stats reporting.
  poolName = null

  # Sets whether or not construction of the pool should fail if the minimum number of connections
  # coludn't be created.
  initializationFailFast = true

  # Sets whether internal queries should be isolated
  isolateInternalQueries = false

  # Sets whether pool suspension is allowed.  There is a performance impact to enabling it.
  allowPoolSuspension = false

  # Sets whether connections should be read only
  readOnly = false

  # Sets whether mbeans should be registered
  registerMbeans = false

  # If non null, sets the catalog that should be used on connections
  catalog = null

  # If non null, sets the transaction isolation level
  transactionIsolation = TRANSACTION_READ_COMMITTED

  # The validation timeout to use
  validationTimeout = 5 seconds

  # If non null, sets the threshold for the amount of time that a connection has been out of the pool before it is
  # considered to have leaked
  leakDetectionThreshold = null
}

property_config = {
  # Whether autocommit should be used
  autoCommit = true
  
  # Sets whether or not construction of the pool should fail if the minimum number of connections
  # coludn't be created.
  initializationFailFast = true
  
  # Sets whether internal queries should be isolated
  isolateInternalQueries = false
  
  # Sets whether pool suspension is allowed.  There is a performance impact to enabling it.
  allowPoolSuspension = false
  
  # Sets whether connections should be read only
  readOnly = false
  
  # Sets whether mbeans should be registered
  registerMbeans = false
  
  # If non null, sets the transaction isolation level
  transactionIsolation = TRANSACTION_READ_COMMITTED
}

common_db_settings {
  connectionPool = HikariCP
  keepAliveConnection = false
  # 以下HikariCPの設定
  # 最大コネクション数 maximumPoolSize
  maxConnections = 10
  # 最小コネクション数 minimumIdle
  minConnections = 10
  # コネクション数 ms
  connectionTimeout = 10000
  # 稼働状態かどうかのテストの時間 ms connectionTimeoutより低く設定
  validationTimeout = 5000
  # アイドル状態の時間 ms
  idleTimeout = 600000
  # コネクションの生存時間 ms
  maxLifetime = 3000000
  # connectionPoolから返却されたconnectionが正しく返却されたかどうかをチェックするthread数を指定します。
  # この値を0に指定した場合、leak detectionはdisableされます。
  leakDetectionThreshold = 0
  initializationFailFast = false
  #connectionTestQuery = []
  #connectionInitSql = []
  readOnly = false
  catalog = null
  # 1. 初めに propertiesが呼ばれてそのまま設定され
  # その後、デフォルトの設定が反映される
  # 2. propertiesにmaximumPoolSizeを設定していても
  # maxConnectionsが優先されるので注意が必要
  properties = ${property_config}
  hikaricp = ${hikaricp_config}
}

db_master {
  driver = com.mysql.jdbc.Driver
  host = "localhost"
  url = "jdbc:mysql://"${db_master.host}":3306/eventapi"
  user = root
  password = password
}
db_master = ${common_db_settings}

db_slave {
  driver = com.mysql.jdbc.Driver
  host = "localhost"
  url = "jdbc:mysql://"${db_master.host}":3306/eventapi"
  user = root
  password = password
}
db_slave = ${common_db_settings}

play.i18n.langs = [ "ja","en" ]
play.http.session {
  cookieName = "play"

  secure = true
  # 86400 * 30
  maxAge = 2592000
  # HTTP 通信ヘッダのみで使われるCookie, つまりJavaScript からはアクセス出来ないCookie
  httpOnly=false
  context="/cookie"
  #domain="localhost"
}
play {
  server {
  
    # The root directory for the Play server instance. This value can
    # be set by providing a path as the first argument to the Play server
    # launcher script. See `ServerConfig.loadConfiguration`.
    dir = ${?user.dir}
  
    # HTTP configuration
    http {
      # The HTTP port of the server. Use a value of "disabled" if the server
      # shouldn't bind an HTTP port.
      port = 9000
      port = ${?http.port}
  
      # The interface address to bind to.
      address = "0.0.0.0"
      address = ${?http.address}
    }
  
    # HTTPS configuration
    https {
  
      # The HTTPS port of the server.
      port = ${?https.port}
  
      # The interface address to bind to
      address = "0.0.0.0"
      address = ${?https.address}
  
      # The SSL engine provider
      engineProvider = "play.core.server.ssl.DefaultSSLEngineProvider"
      engineProvider = ${?play.http.sslengineprovider}
  
      # HTTPS keystore configuration, used by the default SSL engine provider
      keyStore {
        # The path to the keystore
        path = ${?https.keyStore}
  
        # The type of the keystore
        type = "JKS"
        type = ${?https.keyStoreType}
  
        # The password for the keystore
        password = ""
        password = ${?https.keyStorePassword}
  
        # The algorithm to use. If not set, uses the platform default algorithm.
        algorithm = ${?https.keyStoreAlgorithm}
      }
  
      # HTTPS truststore configuration
      trustStore {
  
        # If true, does not do CA verification on client side certificates
        noCaVerification = false
      }
    }
  
    # The type of ServerProvider that should be used to create the server.
    # If not provided, the ServerStart class that instantiates the server
    # will provide a default value.
    provider = ${?server.provider}
  
    # The path to the process id file created by the server when it runs.
    # If set to "/dev/null" then no pid file will be created.
    pidfile.path = ${play.server.dir}/RUNNING_PID
    pidfile.path = ${?pidfile.path}
  
    # Configuration options specific to Netty
    netty {
      # The maximum length of the initial line. This effectively restricts the maximum length of a URL that the server will
      # accept, the initial line consists of the method (3-7 characters), the URL, and the HTTP version (8 characters),
      # including typical whitespace, the maximum URL length will be this number - 18.
      maxInitialLineLength = 4096
      maxInitialLineLength = ${?http.netty.maxInitialLineLength}
  
      # The maximum length of the HTTP headers. The most common effect of this is a restriction in cookie length, including
      # number of cookies and size of cookie values.
      maxHeaderSize = 8192
      maxHeaderSize = ${?http.netty.maxHeaderSize}
  
      # The maximum length of body bytes that Netty will read into memory at a time.
      # This is used in many ways.  Note that this setting has no relation to HTTP chunked transfer encoding - Netty will
      # read "chunks", that is, byte buffers worth of content at a time and pass it to Play, regardless of whether the body
      # is using HTTP chunked transfer encoding.  A single HTTP chunk could span multiple Netty chunks if it exceeds this.
      # A body that is not HTTP chunked will span multiple Netty chunks if it exceeds this or if no content length is
      # specified. This only controls the maximum length of the Netty chunk byte buffers.
      maxChunkSize = 8192
      maxChunkSize = ${?http.netty.maxChunkSize}
  
      # Whether the Netty wire should be logged
      log.wire = false
      log.wire = ${?http.netty.log.wire}
  
      # Netty options. Possible keys here are defined by:
      #
      # http://netty.io/3.9/api/org/jboss/netty/channel/socket/SocketChannelConfig.html
      # http://netty.io/3.9/api/org/jboss/netty/channel/socket/ServerSocketChannelConfig.html
      # http://netty.io/3.9/api/org/jboss/netty/channel/socket/nio/NioSocketChannelConfig.html
      #
      # Options that pertain to the listening server socket are defined at the top level, options for the sockets associated
      # with received client connections are prefixed with child.*
      option {
  
        # Set whether connections should use TCP keep alive
        # child.keepAlive = false
  
        # Set whether the TCP no delay flag is set
        # child.tcpNoDelay = false
  
        # Set the size of the backlog of TCP connections.  The default and exact meaning of this parameter is JDK specific.
        # backlog = 100
      }
    }
  }
}
akka {
  actor {
    default-dispatcher {
      fork-join-executor {
        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 2.0
  
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 6
  
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 48
      }
    }
  }
}
